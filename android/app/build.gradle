def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
apply plugin: 'com.google.gms.google-services'

  def keystoreProperties = new Properties()
   def keystorePropertiesFile = rootProject.file('key.properties')
   if (keystorePropertiesFile.exists()) {
       keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
   }
android {
    compileSdkVersion 33

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.lifegracious.users"

        minSdkVersion 21
        targetSdkVersion 33
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName


        multiDexEnabled true

    }

     buildTypes {
         release {
             // TODO: Add your own signing config for the release build.
             // Signing with the debug keys for now, so `flutter run --release` works.
             signingConfig signingConfigs.debug
         }
     }

    aaptOptions {
        cruncherEnabled = false
    }
//       signingConfigs {
//       release {
//           keyAlias keystoreProperties['keyAlias']
//           keyPassword keystoreProperties['keyPassword']
//           storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
//           storePassword keystoreProperties['storePassword']
//       }
//   }
//   buildTypes {
//       release {
//           signingConfig signingConfigs.release
//       }
//   }

}

flutter {
    source '../..'
}


dependencies {
    implementation platform('com.google.firebase:firebase-bom:31.0.0')
    implementation 'com.android.support:multidex:1.0.2'
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.3.0'
    implementation 'androidx.appcompat:appcompat:1.4.2'
    implementation 'com.google.android.material:material:1.6.0'



}
